[{"C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\App.js":"2","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\hoc\\auth.js":"3","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\LaboratoryStaffBoard\\LaboratoryStaffBoard.js":"4","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\ImagingStaffBoard\\ImagingStaffBoard.js":"5","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\LaboratoryStaffBoard\\medicalTests\\Result.js":"6","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\LaboratoryStaffBoard\\medicalTests\\HematologyAndImmunology.js":"7","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\LaboratoryStaffBoard\\medicalTests\\Biochemical.js":"8","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\LaboratoryStaffBoard\\medicalTests\\FungusAndParasite.js":"9","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\UserInfo\\UserInfo.js":"10","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\NavBar\\NavBar.js":"11","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\RegisterPage\\RegisterPage.js":"12","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\Footer\\Footer.js":"13","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\LoginPage\\LoginPage.js":"14","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\LandingPage\\LandingPage.js":"15","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\serviceWorker.js":"16","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\_actions\\user_actions.js":"17","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\Config.js":"18","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\utils\\FileUpload.js":"19","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\NavBar\\Sections\\RightMenu.js":"20","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\NavBar\\Sections\\LeftMenu.js":"21","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\_reducers\\index.js":"22","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\_actions\\types.js":"23","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\_reducers\\user_reducer.js":"24","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\AdminBoard\\AdminBoard.js":"25"},{"size":1236,"mtime":1619097284399,"results":"26","hashOfConfig":"27"},{"size":2452,"mtime":1619127766969,"results":"28","hashOfConfig":"27"},{"size":859,"mtime":1619081029921,"results":"29","hashOfConfig":"27"},{"size":6845,"mtime":1619129696162,"results":"30","hashOfConfig":"27"},{"size":3686,"mtime":1619844073584,"results":"31","hashOfConfig":"27"},{"size":17151,"mtime":1619132878833,"results":"32","hashOfConfig":"27"},{"size":17935,"mtime":1619132868469,"results":"33","hashOfConfig":"27"},{"size":17896,"mtime":1619132860542,"results":"34","hashOfConfig":"27"},{"size":17417,"mtime":1619132887717,"results":"35","hashOfConfig":"27"},{"size":2718,"mtime":1619081029920,"results":"36","hashOfConfig":"27"},{"size":1659,"mtime":1619128693829,"results":"37","hashOfConfig":"27"},{"size":8174,"mtime":1619110603994,"results":"38","hashOfConfig":"27"},{"size":380,"mtime":1619105058055,"results":"39","hashOfConfig":"27"},{"size":6355,"mtime":1619081029917,"results":"40","hashOfConfig":"27"},{"size":132,"mtime":1619082457302,"results":"41","hashOfConfig":"27"},{"size":5141,"mtime":1619642245986,"results":"42","hashOfConfig":"27"},{"size":1040,"mtime":1619081967816,"results":"43","hashOfConfig":"27"},{"size":60,"mtime":1619081029909,"results":"44","hashOfConfig":"27"},{"size":2346,"mtime":1619134343047,"results":"45","hashOfConfig":"27"},{"size":2018,"mtime":1619781909216,"results":"46","hashOfConfig":"27"},{"size":2017,"mtime":1619111234077,"results":"47","hashOfConfig":"27"},{"size":164,"mtime":1619081029908,"results":"48","hashOfConfig":"27"},{"size":200,"mtime":1619081920602,"results":"49","hashOfConfig":"27"},{"size":538,"mtime":1619082122146,"results":"50","hashOfConfig":"27"},{"size":7650,"mtime":1619783716333,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1hq94k9",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\index.js",[],["116","117","118","119","120"],"C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\App.js",[],"C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\hoc\\auth.js",["121"],"import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { auth } from '../_actions/user_actions';\r\n\r\nexport default function (SpecificComponent, option, adminRoute = null) {\r\n  function AuthenticationCheck(props) {\r\n    const user = useSelector((state) => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n      dispatch(auth()).then((response) => {\r\n        if (!response.payload.isAuth) {\r\n          if (option) {\r\n            props.history.push('/login');\r\n          }\r\n        } else if (adminRoute && !response.payload.isAdmin) {\r\n          props.history.push('/');\r\n        } else if (option === false) {\r\n          props.history.push('/');\r\n        }\r\n      });\r\n    }, []);\r\n\r\n    return <SpecificComponent {...props} user={user} />;\r\n  }\r\n  return AuthenticationCheck;\r\n}\r\n","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\LaboratoryStaffBoard\\LaboratoryStaffBoard.js",[],"C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\ImagingStaffBoard\\ImagingStaffBoard.js",["122"],"C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\LaboratoryStaffBoard\\medicalTests\\Result.js",["123","124","125","126","127","128"],"/* eslint-disable prefer-destructuring */\r\n/* eslint-disable react/button-has-type */\r\n/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport Form from 'react-validation/build/form';\r\nimport Input from 'react-validation/build/input';\r\nimport Select from 'react-validation/build/select';\r\nimport CheckButton from 'react-validation/build/button';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport axios from 'axios';\r\nimport Logo from './images/logo.jpg';\r\n\r\n// eslint-disable-next-line consistent-return\r\nconst required = (value) => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        Vui lòng điền đầy đủ thông tin bắt buộc\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nfunction Result(props) {\r\n  // eslint-disable-next-line react/destructuring-assignment\r\n  const patientId = props.match.params.patientId;\r\n  const form = useRef();\r\n  const checkButton = useRef();\r\n  const date = new Date().toLocaleString('en-GB');\r\n\r\n  const [name, setName] = useState();\r\n  const [birthDate, setBirthDate] = useState();\r\n  const [gender, setGender] = useState();\r\n  const [address, setAddress] = useState();\r\n  const [patientType, setPatientType] = useState();\r\n  // get doctor request from department room\r\n  // TODO: using redux\r\n  const [department, setDepartment] = useState();\r\n  const [doctor, setDoctor] = useState();\r\n  const [diagnosis, setDiagnosis] = useState();\r\n  const [successful, setSuccessful] = useState(false);\r\n\r\n  const [caseType, setCaseType] = useState();\r\n  const [initialSample, setInitialSample] = useState();\r\n\r\n  // state for form field\r\n  const [number, setNumber] = useState();\r\n  const [testName, setTestName] = useState();\r\n  const [quantity, setQuantity] = useState();\r\n  const [price, setPrice] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [insurance, setInsurance] = useState();\r\n  const [payment, setPayment] = useState();\r\n  const [diff, setDiff] = useState();\r\n  const [total, setTotal] = useState();\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/patients/getPatientById?id=${patientId}`)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          const fulltime = response.data.patient[0].birthDate;\r\n          const day = fulltime.substring(8, 10);\r\n          const month = fulltime.substring(5, 7);\r\n          const year = fulltime.substring(0, 4);\r\n          const time = `${day}/${month}/${year}`;\r\n          setName(response.data.patient[0].name);\r\n          setAddress(response.data.patient[0].address);\r\n          setGender(response.data.patient[0].gender);\r\n          setBirthDate(time);\r\n          setDepartment(response.data.patient[0].department);\r\n          setPatientType(response.data.patient[0].patientType);\r\n        } else {\r\n          alert(response.data.err);\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  const onChangeDiagnosis = (e) => {\r\n    setDiagnosis(e.target.value);\r\n  };\r\n\r\n  const onChangeNumber = (e) => {\r\n    setNumber(e.target.value);\r\n  };\r\n\r\n  const onChangeTestName = (e) => {\r\n    setTestName(e.target.value);\r\n  };\r\n\r\n  const onChangeQuantity = (e) => {\r\n    setQuantity(e.target.value);\r\n  };\r\n\r\n  const onChangePrice = (e) => {\r\n    setPrice(e.target.value);\r\n  };\r\n\r\n  const onChangeAmount = (e) => {\r\n    setAmount(e.target.value);\r\n  };\r\n\r\n  const onChangeInsurance = (e) => {\r\n    setInsurance(e.target.value);\r\n  };\r\n\r\n  const onChangePayment = (e) => {\r\n    setPayment(e.target.value);\r\n  };\r\n\r\n  const onChangeDiff = (e) => {\r\n    setDiff(e.target.value);\r\n  };\r\n\r\n  const onChangeTotal = (e) => {\r\n    setTotal(e.target.value);\r\n  };\r\n\r\n  const onChangeCaseType = (e) => {\r\n    setCaseType(e.target.value);\r\n  };\r\n\r\n  const onChangeInitialSample = (e) => {\r\n    setInitialSample(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setSuccessful(false);\r\n    form.current.validateAll();\r\n\r\n    if (checkButton.current.context._errors.length === 0) {\r\n      // dispatch(register(username, email, password, role))\r\n      // .then(() => {\r\n      //   setSuccessful(true);\r\n      // })\r\n      // .catch(() => {\r\n      //   setSuccessful(false);\r\n      // });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"laboratory-form\">\r\n      <Form onSubmit={handleSubmit} ref={form}>\r\n        {!successful && (\r\n          <div>\r\n            {/* form header */}\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group col-md-2\">\r\n                <img src={Logo} alt=\"logo\" width=\"100%\" height=\"90%\" />\r\n              </div>\r\n              <div className=\"form-group col-md-8\">\r\n                <div className=\"col-md-5\" style={{ fontWeight: 'bold', textAlign: 'center' }}>\r\n                  <p>BỘ Y TẾ</p>\r\n                  <p>BỆNH VIỆN DA LIỄU TRUNG ƯƠNG</p>\r\n                </div>\r\n                <p style={{ textAlign: 'center', fontSize: '24px' }}>\r\n                  <b>PHIẾU KẾT QUẢ XÉT NGHIỆM</b>\r\n                </p>\r\n\r\n                <div style={{ textAlign: 'center' }}>\r\n                  <div\r\n                    className=\"form-check form-check-inline\"\r\n                    onChange={onChangeCaseType}\r\n                  >\r\n                    <Input\r\n                      type=\"radio\"\r\n                      className=\"form-check-input\"\r\n                      name=\"casetype\"\r\n                      value=\"normal\"\r\n                      validations={[required]}\r\n                    />\r\n                    Thường\r\n                  </div>\r\n\r\n                  <div\r\n                    className=\"form-check form-check-inline\"\r\n                    onChange={onChangeCaseType}\r\n                  >\r\n                    <Input\r\n                      type=\"radio\"\r\n                      className=\"form-check-input\"\r\n                      name=\"casetype\"\r\n                      value=\"emergency\"\r\n                      validations={[required]}\r\n                    />\r\n                    Cấp cứu\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-2\">\r\n                <label htmlFor=\"patientId\">Mã BN:</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"patientId\"\r\n                  value={patientId}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* form fields */}\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group col-md-4\">\r\n                <label htmlFor=\"username\">Họ tên người bệnh:</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-4\">\r\n                <label htmlFor=\"birthDate\">Năm sinh:</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"birthDate\"\r\n                  value={birthDate}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-4\">\r\n                <label htmlFor=\"gender\">Giới tính:</label>\r\n                <Select\r\n                  name=\"gender\"\r\n                  className=\"form-control\"\r\n                  value={gender}\r\n                  validations={[required]}\r\n                >\r\n                  <option value=\"Nam\">Nam</option>\r\n                  <option value=\"Nữ\">Nữ</option>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"address\">Địa chỉ:</label>\r\n              <Input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"address\"\r\n                value={address}\r\n                validations={[required]}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group col-md-4\">\r\n                <label htmlFor=\"patientType\">Đối tượng:</label>\r\n                <Select\r\n                  name=\"patientType\"\r\n                  className=\"form-control\"\r\n                  value={patientType}\r\n                  validations={[required]}\r\n                >\r\n                  <option value=\"Khám trong giờ\">Khám trong giờ</option>\r\n                  <option value=\"Khám ngoài giờ\">Khám ngoài giờ</option>\r\n                </Select>\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-8\">\r\n                <label htmlFor=\"department\">Khoa phòng:</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"department\"\r\n                  value={department}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"diagnosis\">Chẩn đoán:</label>\r\n              <Input\r\n                type=\"text\"\r\n                className=\"form-control control-label\"\r\n                name=\"diagnosis\"\r\n                value={diagnosis}\r\n                onChange={onChangeDiagnosis}\r\n                validations={[required]}\r\n              />\r\n            </div>\r\n\r\n            {/* TODO: add rows to table */}\r\n            <table className=\"table table-bordered\">\r\n              <thead>\r\n                <tr style={{ textAlign: 'center' }}>\r\n                  <th scope=\"col\" style={{ width: '5%' }}>\r\n                    STT\r\n                    <br />\r\n                    {' '}\r\n                    (1)\r\n                  </th>\r\n                  <th scope=\"col\" style={{ width: '25%' }}>\r\n                    Tên xét nghiệm\r\n                    {' '}\r\n                    <br />\r\n                    {' '}\r\n                    (2)\r\n                  </th>\r\n                  <th scope=\"col\" style={{ width: '5%' }}>\r\n                    S.L\r\n                    {' '}\r\n                    <br />\r\n                    {' '}\r\n                    (3)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    Đơn giá\r\n                    {' '}\r\n                    <br />\r\n                    {' '}\r\n                    (4)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    Thành tiền\r\n                    <br />\r\n                    {' '}\r\n                    (5)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    Bảo hiểm\r\n                    <br />\r\n                    {' '}\r\n                    (6)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    BN chi trả\r\n                    <br />\r\n                    {' '}\r\n                    (7)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    Chênh lệch\r\n                    <br />\r\n                    {' '}\r\n                    (8)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    BN phải trả\r\n                    <br />\r\n                    {' '}\r\n                    (7+8)\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr style={{ textAlign: 'center' }}>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control control-label col\"\r\n                      name=\"number\"\r\n                      value={number}\r\n                      onChange={onChangeNumber}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control control-label col\"\r\n                      name=\"testName\"\r\n                      value={testName}\r\n                      onChange={onChangeTestName}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control control-label col\"\r\n                      name=\"quantity\"\r\n                      value={quantity}\r\n                      onChange={onChangeQuantity}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control control-label col\"\r\n                      name=\"price\"\r\n                      value={price}\r\n                      onChange={onChangePrice}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control control-label col\"\r\n                      name=\"amount\"\r\n                      value={amount}\r\n                      onChange={onChangeAmount}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control control-label col\"\r\n                      name=\"insurance\"\r\n                      value={insurance}\r\n                      onChange={onChangeInsurance}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control control-label col\"\r\n                      name=\"payment\"\r\n                      value={payment}\r\n                      onChange={onChangePayment}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control control-label col\"\r\n                      name=\"diff\"\r\n                      value={diff}\r\n                      onChange={onChangeDiff}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control control-label col\"\r\n                      name=\"total\"\r\n                      value={total}\r\n                      onChange={onChangeTotal}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n\r\n                {/* TODO: complete function to count total amount */}\r\n                <tr>\r\n                  <td\r\n                    colSpan=\"4\"\r\n                    style={{ fontWeight: 'bold', textAlign: 'center' }}\r\n                  >\r\n                    Tổng\r\n                  </td>\r\n                  <td />\r\n                  <td />\r\n                  <td />\r\n                  <td />\r\n                  <td />\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n\r\n            {/* TODO: update time realtime */}\r\n            <div className=\"form-row\">\r\n              <div className=\"col\">\r\n                <p style={{ fontStyle: 'italic', fontWeight: 'bold', textAlign: 'center' }}>\r\n                  Chỉ định ngày\r\n                  {' '}\r\n                  {date}\r\n                </p>\r\n              </div>\r\n              <div className=\"col\">\r\n                <p style={{ fontStyle: 'italic', textAlign: 'center' }}>\r\n                  In phiếu ngày\r\n                  {' '}\r\n                  {date}\r\n                </p>\r\n                <p style={{ fontWeight: 'bold', textAlign: 'center' }}>\r\n                  BÁC SĨ ĐIỀU TRỊ\r\n                </p>\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <button className=\"btn btn-primary btn-block\">\r\n                In phiếu xét nghiệm\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* {message && (\r\n          <div className=\"form-group\">\r\n            <div\r\n              className={\r\n                successful ? 'alert alert-success' : 'alert alert-danger'\r\n              }\r\n              role=\"alert\"\r\n              style={{ textAlign: 'center', margin: 10 }}\r\n            >\r\n              {message}\r\n            </div>\r\n          </div>\r\n        )} */}\r\n        <CheckButton style={{ display: 'none' }} ref={checkButton} />\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;\r\n","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\LaboratoryStaffBoard\\medicalTests\\HematologyAndImmunology.js",["129","130","131","132"],"/* eslint-disable prefer-destructuring */\r\n/* eslint-disable react/button-has-type */\r\n/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport Form from 'react-validation/build/form';\r\nimport Input from 'react-validation/build/input';\r\nimport Select from 'react-validation/build/select';\r\nimport CheckButton from 'react-validation/build/button';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport axios from 'axios';\r\nimport Logo from './images/logo.jpg';\r\n\r\n// eslint-disable-next-line consistent-return\r\nconst required = (value) => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        Vui lòng điền đầy đủ thông tin bắt buộc\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nfunction HematologyAndImmunology(props) {\r\n  // eslint-disable-next-line react/destructuring-assignment\r\n  const patientId = props.match.params.patientId;\r\n  const form = useRef();\r\n  const checkButton = useRef();\r\n  const date = new Date().toLocaleString('en-GB');\r\n\r\n  const [name, setName] = useState();\r\n  const [birthDate, setBirthDate] = useState();\r\n  const [gender, setGender] = useState();\r\n  const [address, setAddress] = useState();\r\n  const [patientType, setPatientType] = useState();\r\n  // get doctor request from department room\r\n  // TODO: using redux\r\n  const [department, setDepartment] = useState();\r\n  const [doctor, setDoctor] = useState();\r\n  const [diagnosis, setDiagnosis] = useState();\r\n  const [successful, setSuccessful] = useState(false);\r\n\r\n  const [caseType, setCaseType] = useState();\r\n  const [initialSample, setInitialSample] = useState();\r\n\r\n  // state for form field\r\n  const [number, setNumber] = useState();\r\n  const [testName, setTestName] = useState();\r\n  const [quantity, setQuantity] = useState();\r\n  const [price, setPrice] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [insurance, setInsurance] = useState();\r\n  const [payment, setPayment] = useState();\r\n  const [diff, setDiff] = useState();\r\n  const [total, setTotal] = useState();\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/patients/getPatientById?id=${patientId}`)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          const fulltime = response.data.patient[0].birthDate;\r\n          const day = fulltime.substring(8, 10);\r\n          const month = fulltime.substring(5, 7);\r\n          const year = fulltime.substring(0, 4);\r\n          const time = `${day}/${month}/${year}`;\r\n          setName(response.data.patient[0].name);\r\n          setAddress(response.data.patient[0].address);\r\n          setGender(response.data.patient[0].gender);\r\n          setBirthDate(time);\r\n          setDepartment(response.data.patient[0].department);\r\n          setPatientType(response.data.patient[0].patientType);\r\n        } else {\r\n          alert(response.data.err);\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  const onChangeDiagnosis = (e) => {\r\n    setDiagnosis(e.target.value);\r\n  };\r\n\r\n  const onChangeNumber = (e) => {\r\n    setNumber(e.target.value);\r\n  };\r\n\r\n  const onChangeTestName = (e) => {\r\n    setTestName(e.target.value);\r\n  };\r\n\r\n  const onChangeQuantity = (e) => {\r\n    setQuantity(e.target.value);\r\n  };\r\n\r\n  const onChangePrice = (e) => {\r\n    setPrice(e.target.value);\r\n  };\r\n\r\n  const onChangeAmount = (e) => {\r\n    setAmount(e.target.value);\r\n  };\r\n\r\n  const onChangeInsurance = (e) => {\r\n    setInsurance(e.target.value);\r\n  };\r\n\r\n  const onChangePayment = (e) => {\r\n    setPayment(e.target.value);\r\n  };\r\n\r\n  const onChangeDiff = (e) => {\r\n    setDiff(e.target.value);\r\n  };\r\n\r\n  const onChangeTotal = (e) => {\r\n    setTotal(e.target.value);\r\n  };\r\n\r\n  const onChangeCaseType = (e) => {\r\n    setCaseType(e.target.value);\r\n  };\r\n\r\n  const onChangeInitialSample = (e) => {\r\n    setInitialSample(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setSuccessful(false);\r\n    form.current.validateAll();\r\n\r\n    if (checkButton.current.context._errors.length === 0) {\r\n      // dispatch(register(username, email, password, role))\r\n      // .then(() => {\r\n      //   setSuccessful(true);\r\n      // })\r\n      // .catch(() => {\r\n      //   setSuccessful(false);\r\n      // });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"laboratory-form\">\r\n      <Form onSubmit={handleSubmit} ref={form}>\r\n        {!successful && (\r\n          <div>\r\n            {/* form header */}\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group col-md-2\">\r\n                <img src={Logo} alt=\"logo\" width=\"100%\" height=\"90%\" />\r\n              </div>\r\n              <div className=\"form-group col-md-8\">\r\n                <p>\r\n                  <b>\r\n                    Bệnh viện Da liễu Trung ương\r\n                    <br />\r\n                    15A Phương Mai - Đống Đa - Hà Nội\r\n                    <br />\r\n                    Website:\r\n                    {' '}\r\n                    <a href=\"http://dalieu.vn\" style={{ color: 'black' }}>\r\n                      http://dalieu.vn\r\n                    </a>\r\n                  </b>\r\n                </p>\r\n                <p style={{ textAlign: 'center', fontSize: '24px' }}>\r\n                  <b>PHIẾU HUYẾT HỌC - MIỄN DỊCH</b>\r\n                </p>\r\n\r\n                <div style={{ textAlign: 'center' }}>\r\n                  <div\r\n                    className=\"form-check form-check-inline\"\r\n                    onChange={onChangeCaseType}\r\n                  >\r\n                    <Input\r\n                      type=\"radio\"\r\n                      className=\"form-check-input\"\r\n                      name=\"casetype\"\r\n                      value=\"normal\"\r\n                      validations={[required]}\r\n                    />\r\n                    Thường\r\n                  </div>\r\n\r\n                  <div\r\n                    className=\"form-check form-check-inline\"\r\n                    onChange={onChangeCaseType}\r\n                  >\r\n                    <Input\r\n                      type=\"radio\"\r\n                      className=\"form-check-input\"\r\n                      name=\"casetype\"\r\n                      value=\"emergency\"\r\n                      validations={[required]}\r\n                    />\r\n                    Cấp cứu\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-2\">\r\n                <label htmlFor=\"patientId\">Mã BN:</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"patientId\"\r\n                  value={patientId}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div style={{ textAlign: 'center', fontWeight: 'bold' }}>\r\n              <div className=\"form-group row justify-content-center\">\r\n                <label htmlFor=\"initialSample\" className=\"col-md-2\">\r\n                  Mẫu ban đầu:\r\n                </label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control col-md-6\"\r\n                  name=\"initialSample\"\r\n                  value={initialSample}\r\n                  onChange={onChangeInitialSample}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n              <p>THỰC HIỆN XÉT NGHIỆM TẠI KHU LẤY BỆNH PHẨM</p>\r\n            </div>\r\n\r\n            {/* form fields */}\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group col-md-4\">\r\n                <label htmlFor=\"username\">Họ tên người bệnh:</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-4\">\r\n                <label htmlFor=\"birthDate\">Năm sinh:</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"birthDate\"\r\n                  value={birthDate}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-4\">\r\n                <label htmlFor=\"gender\">Giới tính:</label>\r\n                <Select\r\n                  name=\"gender\"\r\n                  className=\"form-control\"\r\n                  value={gender}\r\n                  validations={[required]}\r\n                >\r\n                  <option value=\"Nam\">Nam</option>\r\n                  <option value=\"Nữ\">Nữ</option>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"address\">Địa chỉ:</label>\r\n              <Input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"address\"\r\n                value={address}\r\n                validations={[required]}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group col-md-4\">\r\n                <label htmlFor=\"patientType\">Đối tượng:</label>\r\n                <Select\r\n                  name=\"patientType\"\r\n                  className=\"form-control\"\r\n                  value={patientType}\r\n                  validations={[required]}\r\n                >\r\n                  <option value=\"Khám trong giờ\">Khám trong giờ</option>\r\n                  <option value=\"Khám ngoài giờ\">Khám ngoài giờ</option>\r\n                </Select>\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-8\">\r\n                <label htmlFor=\"department\">Khoa phòng:</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"department\"\r\n                  value={department}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"diagnosis\">Chẩn đoán:</label>\r\n              <Input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"diagnosis\"\r\n                value={diagnosis}\r\n                onChange={onChangeDiagnosis}\r\n                validations={[required]}\r\n              />\r\n            </div>\r\n\r\n            {/* TODO: add rows to table */}\r\n            <table className=\"table table-bordered\">\r\n              <thead>\r\n                <tr style={{ textAlign: 'center' }}>\r\n                  <th scope=\"col\" style={{ width: '5%' }}>\r\n                    STT\r\n                    <br />\r\n                    {' '}\r\n                    (1)\r\n                  </th>\r\n                  <th scope=\"col\" style={{ width: '25%' }}>\r\n                    Tên xét nghiệm\r\n                    {' '}\r\n                    <br />\r\n                    {' '}\r\n                    (2)\r\n                  </th>\r\n                  <th scope=\"col\" style={{ width: '5%' }}>\r\n                    S.L\r\n                    {' '}\r\n                    <br />\r\n                    {' '}\r\n                    (3)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    Đơn giá\r\n                    {' '}\r\n                    <br />\r\n                    {' '}\r\n                    (4)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    Thành tiền\r\n                    <br />\r\n                    {' '}\r\n                    (5)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    Bảo hiểm\r\n                    <br />\r\n                    {' '}\r\n                    (6)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    BN chi trả\r\n                    <br />\r\n                    {' '}\r\n                    (7)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    Chênh lệch\r\n                    <br />\r\n                    {' '}\r\n                    (8)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    BN phải trả\r\n                    <br />\r\n                    {' '}\r\n                    (7+8)\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr style={{ textAlign: 'center' }}>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control col\"\r\n                      name=\"number\"\r\n                      value={number}\r\n                      onChange={onChangeNumber}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control col\"\r\n                      name=\"testName\"\r\n                      value={testName}\r\n                      onChange={onChangeTestName}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control col\"\r\n                      name=\"quantity\"\r\n                      value={quantity}\r\n                      onChange={onChangeQuantity}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control col\"\r\n                      name=\"price\"\r\n                      value={price}\r\n                      onChange={onChangePrice}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control col\"\r\n                      name=\"amount\"\r\n                      value={amount}\r\n                      onChange={onChangeAmount}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control col\"\r\n                      name=\"insurance\"\r\n                      value={insurance}\r\n                      onChange={onChangeInsurance}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control col\"\r\n                      name=\"payment\"\r\n                      value={payment}\r\n                      onChange={onChangePayment}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control col\"\r\n                      name=\"diff\"\r\n                      value={diff}\r\n                      onChange={onChangeDiff}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control col\"\r\n                      name=\"total\"\r\n                      value={total}\r\n                      onChange={onChangeTotal}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                {/* TODO: complete function to count total amount */}\r\n                <tr>\r\n                  <td colSpan=\"4\" style={{ fontWeight: 'bold', textAlign: 'center' }}>\r\n                    Tổng\r\n                  </td>\r\n                  <td />\r\n                  <td />\r\n                  <td />\r\n                  <td />\r\n                  <td />\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n\r\n            {/* TODO: update time realtime */}\r\n            <div className=\"form-row\">\r\n              <div className=\"col\">\r\n                <p style={{ fontStyle: 'italic', fontWeight: 'bold', textAlign: 'center' }}>\r\n                  Chỉ định ngày\r\n                  {' '}\r\n                  {date}\r\n                </p>\r\n              </div>\r\n              <div className=\"col\">\r\n                <p style={{ fontStyle: 'italic', textAlign: 'center' }}>\r\n                  In phiếu ngày\r\n                  {' '}\r\n                  {date}\r\n                </p>\r\n                <p style={{ fontWeight: 'bold', textAlign: 'center' }}>\r\n                  BÁC SĨ ĐIỀU TRỊ\r\n                </p>\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <button className=\"btn btn-primary btn-block\">\r\n                In phiếu xét nghiệm\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* {message && (\r\n          <div className=\"form-group\">\r\n            <div\r\n              className={\r\n                successful ? 'alert alert-success' : 'alert alert-danger'\r\n              }\r\n              role=\"alert\"\r\n              style={{ textAlign: 'center', margin: 10 }}\r\n            >\r\n              {message}\r\n            </div>\r\n          </div>\r\n        )} */}\r\n        <CheckButton style={{ display: 'none' }} ref={checkButton} />\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HematologyAndImmunology;\r\n","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\LaboratoryStaffBoard\\medicalTests\\Biochemical.js",["133","134","135","136"],"/* eslint-disable prefer-destructuring */\r\n/* eslint-disable react/button-has-type */\r\n/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport Form from 'react-validation/build/form';\r\nimport Input from 'react-validation/build/input';\r\nimport Select from 'react-validation/build/select';\r\nimport CheckButton from 'react-validation/build/button';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport axios from 'axios';\r\nimport Logo from './images/logo.jpg';\r\n\r\n// eslint-disable-next-line consistent-return\r\nconst required = (value) => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        Vui lòng điền đầy đủ thông tin bắt buộc\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nfunction Biochemical(props) {\r\n  // eslint-disable-next-line react/destructuring-assignment\r\n  const patientId = props.match.params.patientId;\r\n  const form = useRef();\r\n  const checkButton = useRef();\r\n  const date = new Date().toLocaleString('en-GB');\r\n\r\n  const [name, setName] = useState();\r\n  const [birthDate, setBirthDate] = useState();\r\n  const [gender, setGender] = useState();\r\n  const [address, setAddress] = useState();\r\n  const [patientType, setPatientType] = useState();\r\n  // get doctor request from department room\r\n  // TODO: using redux\r\n  const [department, setDepartment] = useState();\r\n  const [doctor, setDoctor] = useState();\r\n  const [diagnosis, setDiagnosis] = useState();\r\n  const [successful, setSuccessful] = useState(false);\r\n\r\n  const [caseType, setCaseType] = useState();\r\n  const [initialSample, setInitialSample] = useState();\r\n\r\n  // state for form field\r\n  const [number, setNumber] = useState();\r\n  const [testName, setTestName] = useState();\r\n  const [quantity, setQuantity] = useState();\r\n  const [price, setPrice] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [insurance, setInsurance] = useState();\r\n  const [payment, setPayment] = useState();\r\n  const [diff, setDiff] = useState();\r\n  const [total, setTotal] = useState();\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/patients/getPatientById?id=${patientId}`)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          const fulltime = response.data.patient[0].birthDate;\r\n          const day = fulltime.substring(8, 10);\r\n          const month = fulltime.substring(5, 7);\r\n          const year = fulltime.substring(0, 4);\r\n          const time = `${day}/${month}/${year}`;\r\n          setName(response.data.patient[0].name);\r\n          setAddress(response.data.patient[0].address);\r\n          setGender(response.data.patient[0].gender);\r\n          setBirthDate(time);\r\n          setDepartment(response.data.patient[0].department);\r\n          setPatientType(response.data.patient[0].patientType);\r\n        } else {\r\n          alert(response.data.err);\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  const onChangeDiagnosis = (e) => {\r\n    setDiagnosis(e.target.value);\r\n  };\r\n\r\n  const onChangeNumber = (e) => {\r\n    setNumber(e.target.value);\r\n  };\r\n\r\n  const onChangeTestName = (e) => {\r\n    setTestName(e.target.value);\r\n  };\r\n\r\n  const onChangeQuantity = (e) => {\r\n    setQuantity(e.target.value);\r\n  };\r\n\r\n  const onChangePrice = (e) => {\r\n    setPrice(e.target.value);\r\n  };\r\n\r\n  const onChangeAmount = (e) => {\r\n    setAmount(e.target.value);\r\n  };\r\n\r\n  const onChangeInsurance = (e) => {\r\n    setInsurance(e.target.value);\r\n  };\r\n\r\n  const onChangePayment = (e) => {\r\n    setPayment(e.target.value);\r\n  };\r\n\r\n  const onChangeDiff = (e) => {\r\n    setDiff(e.target.value);\r\n  };\r\n\r\n  const onChangeTotal = (e) => {\r\n    setTotal(e.target.value);\r\n  };\r\n\r\n  const onChangeCaseType = (e) => {\r\n    setCaseType(e.target.value);\r\n  };\r\n\r\n  const onChangeInitialSample = (e) => {\r\n    setInitialSample(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setSuccessful(false);\r\n    form.current.validateAll();\r\n\r\n    if (checkButton.current.context._errors.length === 0) {\r\n      // dispatch(register(username, email, password, role))\r\n      // .then(() => {\r\n      //   setSuccessful(true);\r\n      // })\r\n      // .catch(() => {\r\n      //   setSuccessful(false);\r\n      // });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"laboratory-form\">\r\n      <Form onSubmit={handleSubmit} ref={form}>\r\n        {!successful && (\r\n          <div>\r\n            {/* form header */}\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group col-md-2\">\r\n                <img src={Logo} alt=\"logo\" width=\"100%\" height=\"90%\" />\r\n              </div>\r\n              <div className=\"form-group col-md-8\">\r\n                <p>\r\n                  <b>\r\n                    Bệnh viện Da liễu Trung ương\r\n                    <br />\r\n                    15A Phương Mai - Đống Đa - Hà Nội\r\n                    <br />\r\n                    Website:\r\n                    {' '}\r\n                    <a href=\"http://dalieu.vn\" style={{ color: 'black' }}>\r\n                      http://dalieu.vn\r\n                    </a>\r\n                  </b>\r\n                </p>\r\n                <p style={{ textAlign: 'center', fontSize: '24px' }}>\r\n                  <b>PHIẾU SINH HÓA MÁU</b>\r\n                </p>\r\n\r\n                <div style={{ textAlign: 'center' }}>\r\n                  <div\r\n                    className=\"form-check form-check-inline\"\r\n                    onChange={onChangeCaseType}\r\n                  >\r\n                    <Input\r\n                      type=\"radio\"\r\n                      className=\"form-check-input\"\r\n                      name=\"casetype\"\r\n                      value=\"normal\"\r\n                      validations={[required]}\r\n                    />\r\n                    Thường\r\n                  </div>\r\n\r\n                  <div\r\n                    className=\"form-check form-check-inline\"\r\n                    onChange={onChangeCaseType}\r\n                  >\r\n                    <Input\r\n                      type=\"radio\"\r\n                      className=\"form-check-input\"\r\n                      name=\"casetype\"\r\n                      value=\"emergency\"\r\n                      validations={[required]}\r\n                    />\r\n                    Cấp cứu\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-2\">\r\n                <label htmlFor=\"patientId\">Mã BN:</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"patientId\"\r\n                  value={patientId}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div style={{ textAlign: 'center', fontWeight: 'bold' }}>\r\n              <div className=\"form-group row justify-content-center\">\r\n                <label htmlFor=\"initialSample\" className=\"col-md-2\">\r\n                  Mẫu ban đầu:\r\n                </label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control col-md-6\"\r\n                  name=\"initialSample\"\r\n                  value={initialSample}\r\n                  onChange={onChangeInitialSample}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n              <p>THỰC HIỆN XÉT NGHIỆM TẠI KHU LẤY BỆNH PHẨM</p>\r\n            </div>\r\n\r\n            {/* form fields */}\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group col-md-4\">\r\n                <label htmlFor=\"username\">Họ tên người bệnh:</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-4\">\r\n                <label htmlFor=\"birthDate\">Năm sinh:</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"birthDate\"\r\n                  value={birthDate}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-4\">\r\n                <label htmlFor=\"gender\">Giới tính:</label>\r\n                <Select\r\n                  name=\"gender\"\r\n                  className=\"form-control\"\r\n                  value={gender}\r\n                  validations={[required]}\r\n                >\r\n                  <option value=\"Nam\">Nam</option>\r\n                  <option value=\"Nữ\">Nữ</option>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"address\">Địa chỉ:</label>\r\n              <Input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"address\"\r\n                value={address}\r\n                validations={[required]}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group col-md-4\">\r\n                <label htmlFor=\"patientType\">Đối tượng:</label>\r\n                <Select\r\n                  name=\"patientType\"\r\n                  className=\"form-control\"\r\n                  value={patientType}\r\n                  validations={[required]}\r\n                >\r\n                  <option value=\"Khám trong giờ\">Khám trong giờ</option>\r\n                  <option value=\"Khám ngoài giờ\">Khám ngoài giờ</option>\r\n                </Select>\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-8\">\r\n                <label htmlFor=\"department\">Khoa phòng:</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"department\"\r\n                  value={department}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"diagnosis\">Chẩn đoán:</label>\r\n              <Input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"diagnosis\"\r\n                value={diagnosis}\r\n                onChange={onChangeDiagnosis}\r\n                validations={[required]}\r\n              />\r\n            </div>\r\n\r\n            {/* TODO: add rows to table */}\r\n            <table className=\"table table-bordered\">\r\n              <thead>\r\n                <tr style={{ textAlign: 'center' }}>\r\n                  <th scope=\"col\" style={{ width: '5%' }}>\r\n                    STT\r\n                    <br />\r\n                    {' '}\r\n                    (1)\r\n                  </th>\r\n                  <th scope=\"col\" style={{ width: '25%' }}>\r\n                    Tên xét nghiệm\r\n                    {' '}\r\n                    <br />\r\n                    {' '}\r\n                    (2)\r\n                  </th>\r\n                  <th scope=\"col\" style={{ width: '5%' }}>\r\n                    S.L\r\n                    {' '}\r\n                    <br />\r\n                    {' '}\r\n                    (3)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    Đơn giá\r\n                    {' '}\r\n                    <br />\r\n                    {' '}\r\n                    (4)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    Thành tiền\r\n                    <br />\r\n                    {' '}\r\n                    (5)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    Bảo hiểm\r\n                    <br />\r\n                    {' '}\r\n                    (6)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    BN chi trả\r\n                    <br />\r\n                    {' '}\r\n                    (7)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    Chênh lệch\r\n                    <br />\r\n                    {' '}\r\n                    (8)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    BN phải trả\r\n                    <br />\r\n                    {' '}\r\n                    (7+8)\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr style={{ textAlign: 'center' }}>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control col\"\r\n                      name=\"number\"\r\n                      value={number}\r\n                      onChange={onChangeNumber}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control col\"\r\n                      name=\"testName\"\r\n                      value={testName}\r\n                      onChange={onChangeTestName}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control col\"\r\n                      name=\"quantity\"\r\n                      value={quantity}\r\n                      onChange={onChangeQuantity}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control col\"\r\n                      name=\"price\"\r\n                      value={price}\r\n                      onChange={onChangePrice}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control col\"\r\n                      name=\"amount\"\r\n                      value={amount}\r\n                      onChange={onChangeAmount}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control col\"\r\n                      name=\"insurance\"\r\n                      value={insurance}\r\n                      onChange={onChangeInsurance}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control col\"\r\n                      name=\"payment\"\r\n                      value={payment}\r\n                      onChange={onChangePayment}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control col\"\r\n                      name=\"diff\"\r\n                      value={diff}\r\n                      onChange={onChangeDiff}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control col\"\r\n                      name=\"total\"\r\n                      value={total}\r\n                      onChange={onChangeTotal}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                {/* TODO: complete function to count total amount */}\r\n                <tr>\r\n                  <td colSpan=\"4\" style={{ fontWeight: 'bold', textAlign: 'center' }}>\r\n                    Tổng\r\n                  </td>\r\n                  <td />\r\n                  <td />\r\n                  <td />\r\n                  <td />\r\n                  <td />\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n\r\n            {/* TODO: update time realtime */}\r\n            <div className=\"form-row\">\r\n              <div className=\"col\">\r\n                <p style={{ fontStyle: 'italic', fontWeight: 'bold', textAlign: 'center' }}>\r\n                  Chỉ định ngày\r\n                  {' '}\r\n                  {date}\r\n                </p>\r\n              </div>\r\n              <div className=\"col\">\r\n                <p style={{ fontStyle: 'italic', textAlign: 'center' }}>\r\n                  In phiếu ngày\r\n                  {' '}\r\n                  {date}\r\n                </p>\r\n                <p style={{ fontWeight: 'bold', textAlign: 'center' }}>\r\n                  BÁC SĨ ĐIỀU TRỊ\r\n                </p>\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <button className=\"btn btn-primary btn-block\">\r\n                In phiếu xét nghiệm\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* {message && (\r\n          <div className=\"form-group\">\r\n            <div\r\n              className={\r\n                successful ? 'alert alert-success' : 'alert alert-danger'\r\n              }\r\n              role=\"alert\"\r\n              style={{ textAlign: 'center', margin: 10 }}\r\n            >\r\n              {message}\r\n            </div>\r\n          </div>\r\n        )} */}\r\n        <CheckButton style={{ display: 'none' }} ref={checkButton} />\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Biochemical;\r\n","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\LaboratoryStaffBoard\\medicalTests\\FungusAndParasite.js",["137","138","139","140","141","142"],"/* eslint-disable prefer-destructuring */\r\n/* eslint-disable react/button-has-type */\r\n/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport Form from 'react-validation/build/form';\r\nimport Input from 'react-validation/build/input';\r\nimport Select from 'react-validation/build/select';\r\nimport CheckButton from 'react-validation/build/button';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport axios from 'axios';\r\nimport Logo from './images/logo.jpg';\r\n\r\n// eslint-disable-next-line consistent-return\r\nconst required = (value) => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        Vui lòng điền đầy đủ thông tin bắt buộc\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nfunction FungusAndParasite(props) {\r\n  // eslint-disable-next-line react/destructuring-assignment\r\n  const patientId = props.match.params.patientId;\r\n  const form = useRef();\r\n  const checkButton = useRef();\r\n  const date = new Date().toLocaleString('en-GB');\r\n\r\n  const [name, setName] = useState();\r\n  const [birthDate, setBirthDate] = useState();\r\n  const [gender, setGender] = useState();\r\n  const [address, setAddress] = useState();\r\n  const [patientType, setPatientType] = useState();\r\n  // get doctor request from department room\r\n  // TODO: using redux\r\n  const [department, setDepartment] = useState();\r\n  const [doctor, setDoctor] = useState();\r\n  const [diagnosis, setDiagnosis] = useState();\r\n  const [successful, setSuccessful] = useState(false);\r\n\r\n  const [caseType, setCaseType] = useState();\r\n  const [initialSample, setInitialSample] = useState();\r\n\r\n  // state for form field\r\n  const [number, setNumber] = useState();\r\n  const [testName, setTestName] = useState();\r\n  const [quantity, setQuantity] = useState();\r\n  const [price, setPrice] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [insurance, setInsurance] = useState();\r\n  const [payment, setPayment] = useState();\r\n  const [diff, setDiff] = useState();\r\n  const [total, setTotal] = useState();\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/patients/getPatientById?id=${patientId}`)\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          const fulltime = response.data.patient[0].birthDate;\r\n          const day = fulltime.substring(8, 10);\r\n          const month = fulltime.substring(5, 7);\r\n          const year = fulltime.substring(0, 4);\r\n          const time = `${day}/${month}/${year}`;\r\n          setName(response.data.patient[0].name);\r\n          setAddress(response.data.patient[0].address);\r\n          setGender(response.data.patient[0].gender);\r\n          setBirthDate(time);\r\n          setDepartment(response.data.patient[0].department);\r\n          setPatientType(response.data.patient[0].patientType);\r\n        } else {\r\n          alert(response.data.err);\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  const onChangeDiagnosis = (e) => {\r\n    setDiagnosis(e.target.value);\r\n  };\r\n\r\n  const onChangeNumber = (e) => {\r\n    setNumber(e.target.value);\r\n  };\r\n\r\n  const onChangeTestName = (e) => {\r\n    setTestName(e.target.value);\r\n  };\r\n\r\n  const onChangeQuantity = (e) => {\r\n    setQuantity(e.target.value);\r\n  };\r\n\r\n  const onChangePrice = (e) => {\r\n    setPrice(e.target.value);\r\n  };\r\n\r\n  const onChangeAmount = (e) => {\r\n    setAmount(e.target.value);\r\n  };\r\n\r\n  const onChangeInsurance = (e) => {\r\n    setInsurance(e.target.value);\r\n  };\r\n\r\n  const onChangePayment = (e) => {\r\n    setPayment(e.target.value);\r\n  };\r\n\r\n  const onChangeDiff = (e) => {\r\n    setDiff(e.target.value);\r\n  };\r\n\r\n  const onChangeTotal = (e) => {\r\n    setTotal(e.target.value);\r\n  };\r\n\r\n  const onChangeCaseType = (e) => {\r\n    setCaseType(e.target.value);\r\n  };\r\n\r\n  const onChangeInitialSample = (e) => {\r\n    setInitialSample(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setSuccessful(false);\r\n    form.current.validateAll();\r\n\r\n    if (checkButton.current.context._errors.length === 0) {\r\n      // dispatch(register(username, email, password, role))\r\n      // .then(() => {\r\n      //   setSuccessful(true);\r\n      // })\r\n      // .catch(() => {\r\n      //   setSuccessful(false);\r\n      // });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"laboratory-form\">\r\n      <Form onSubmit={handleSubmit} ref={form}>\r\n        {!successful && (\r\n          <div>\r\n            {/* form header */}\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group col-md-2\">\r\n                <img src={Logo} alt=\"logo\" width=\"100%\" height=\"90%\" />\r\n              </div>\r\n              <div className=\"form-group col-md-8\">\r\n                <p>\r\n                  <b>\r\n                    Bệnh viện Da liễu Trung ương\r\n                    <br />\r\n                    15A Phương Mai - Đống Đa - Hà Nội\r\n                    <br />\r\n                    Website:\r\n                    {' '}\r\n                    <a href=\"http://dalieu.vn\" style={{ color: 'black' }}>\r\n                      http://dalieu.vn\r\n                    </a>\r\n                  </b>\r\n                </p>\r\n                <p style={{ textAlign: 'center', fontSize: '24px' }}>\r\n                  <b>PHIẾU NẤM - KÍ SINH TRÙNG</b>\r\n                </p>\r\n\r\n                <div style={{ textAlign: 'center' }}>\r\n                  <div\r\n                    className=\"form-check form-check-inline\"\r\n                    onChange={onChangeCaseType}\r\n                  >\r\n                    <Input\r\n                      type=\"radio\"\r\n                      className=\"form-check-input\"\r\n                      name=\"casetype\"\r\n                      value=\"normal\"\r\n                      validations={[required]}\r\n                    />\r\n                    Thường\r\n                  </div>\r\n\r\n                  <div\r\n                    className=\"form-check form-check-inline\"\r\n                    onChange={onChangeCaseType}\r\n                  >\r\n                    <Input\r\n                      type=\"radio\"\r\n                      className=\"form-check-input\"\r\n                      name=\"casetype\"\r\n                      value=\"emergency\"\r\n                      validations={[required]}\r\n                    />\r\n                    Cấp cứu\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-2\">\r\n                <label htmlFor=\"patientId\">Mã BN:</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"patientId\"\r\n                  value={patientId}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* form fields */}\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group col-md-4\">\r\n                <label htmlFor=\"username\">Họ tên người bệnh:</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-4\">\r\n                <label htmlFor=\"birthDate\">Năm sinh:</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"birthDate\"\r\n                  value={birthDate}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-4\">\r\n                <label htmlFor=\"gender\">Giới tính:</label>\r\n                <Select\r\n                  name=\"gender\"\r\n                  className=\"form-control\"\r\n                  value={gender}\r\n                  validations={[required]}\r\n                >\r\n                  <option value=\"Nam\">Nam</option>\r\n                  <option value=\"Nữ\">Nữ</option>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"address\">Địa chỉ:</label>\r\n              <Input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"address\"\r\n                value={address}\r\n                validations={[required]}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group col-md-4\">\r\n                <label htmlFor=\"patientType\">Đối tượng:</label>\r\n                <Select\r\n                  name=\"patientType\"\r\n                  className=\"form-control\"\r\n                  value={patientType}\r\n                  validations={[required]}\r\n                >\r\n                  <option value=\"Khám trong giờ\">Khám trong giờ</option>\r\n                  <option value=\"Khám ngoài giờ\">Khám ngoài giờ</option>\r\n                </Select>\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-8\">\r\n                <label htmlFor=\"department\">Khoa phòng:</label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"department\"\r\n                  value={department}\r\n                  validations={[required]}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"diagnosis\">Chẩn đoán:</label>\r\n              <Input\r\n                type=\"text\"\r\n                className=\"form-control control-label\"\r\n                name=\"diagnosis\"\r\n                value={diagnosis}\r\n                onChange={onChangeDiagnosis}\r\n                validations={[required]}\r\n              />\r\n            </div>\r\n\r\n            {/* TODO: add rows to table */}\r\n            <table className=\"table table-bordered\">\r\n              <thead>\r\n                <tr style={{ textAlign: 'center' }}>\r\n                  <th scope=\"col\" style={{ width: '5%' }}>\r\n                    STT\r\n                    <br />\r\n                    {' '}\r\n                    (1)\r\n                  </th>\r\n                  <th scope=\"col\" style={{ width: '25%' }}>\r\n                    Tên xét nghiệm\r\n                    {' '}\r\n                    <br />\r\n                    {' '}\r\n                    (2)\r\n                  </th>\r\n                  <th scope=\"col\" style={{ width: '5%' }}>\r\n                    S.L\r\n                    {' '}\r\n                    <br />\r\n                    {' '}\r\n                    (3)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    Đơn giá\r\n                    {' '}\r\n                    <br />\r\n                    {' '}\r\n                    (4)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    Thành tiền\r\n                    <br />\r\n                    {' '}\r\n                    (5)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    Bảo hiểm\r\n                    <br />\r\n                    {' '}\r\n                    (6)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    BN chi trả\r\n                    <br />\r\n                    {' '}\r\n                    (7)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    Chênh lệch\r\n                    <br />\r\n                    {' '}\r\n                    (8)\r\n                  </th>\r\n                  <th scope=\"col\">\r\n                    BN phải trả\r\n                    <br />\r\n                    {' '}\r\n                    (7+8)\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr style={{ textAlign: 'center' }}>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control control-label col\"\r\n                      name=\"number\"\r\n                      value={number}\r\n                      onChange={onChangeNumber}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control control-label col\"\r\n                      name=\"testName\"\r\n                      value={testName}\r\n                      onChange={onChangeTestName}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control control-label col\"\r\n                      name=\"quantity\"\r\n                      value={quantity}\r\n                      onChange={onChangeQuantity}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control control-label col\"\r\n                      name=\"price\"\r\n                      value={price}\r\n                      onChange={onChangePrice}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control control-label col\"\r\n                      name=\"amount\"\r\n                      value={amount}\r\n                      onChange={onChangeAmount}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control control-label col\"\r\n                      name=\"insurance\"\r\n                      value={insurance}\r\n                      onChange={onChangeInsurance}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control control-label col\"\r\n                      name=\"payment\"\r\n                      value={payment}\r\n                      onChange={onChangePayment}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control control-label col\"\r\n                      name=\"diff\"\r\n                      value={diff}\r\n                      onChange={onChangeDiff}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <Input\r\n                      type=\"text\"\r\n                      className=\"form-control control-label col\"\r\n                      name=\"total\"\r\n                      value={total}\r\n                      onChange={onChangeTotal}\r\n                      validations={[required]}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n\r\n                {/* TODO: complete function to count total amount */}\r\n                <tr>\r\n                  <td\r\n                    colSpan=\"4\"\r\n                    style={{ fontWeight: 'bold', textAlign: 'center' }}\r\n                  >\r\n                    Tổng\r\n                  </td>\r\n                  <td />\r\n                  <td />\r\n                  <td />\r\n                  <td />\r\n                  <td />\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n\r\n            {/* TODO: update time realtime */}\r\n            <div className=\"form-row\">\r\n              <div className=\"col\">\r\n                <p style={{ fontStyle: 'italic', fontWeight: 'bold', textAlign: 'center' }}>\r\n                  Chỉ định ngày\r\n                  {' '}\r\n                  {date}\r\n                </p>\r\n              </div>\r\n              <div className=\"col\">\r\n                <p style={{ fontStyle: 'italic', textAlign: 'center' }}>\r\n                  In phiếu ngày\r\n                  {' '}\r\n                  {date}\r\n                </p>\r\n                <p style={{ fontWeight: 'bold', textAlign: 'center' }}>\r\n                  BÁC SĨ ĐIỀU TRỊ\r\n                </p>\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <button className=\"btn btn-primary btn-block\">\r\n                In phiếu xét nghiệm\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* {message && (\r\n          <div className=\"form-group\">\r\n            <div\r\n              className={\r\n                successful ? 'alert alert-success' : 'alert alert-danger'\r\n              }\r\n              role=\"alert\"\r\n              style={{ textAlign: 'center', margin: 10 }}\r\n            >\r\n              {message}\r\n            </div>\r\n          </div>\r\n        )} */}\r\n        <CheckButton style={{ display: 'none' }} ref={checkButton} />\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FungusAndParasite;\r\n","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\UserInfo\\UserInfo.js",["143","144"],"/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Form, Input, Button, Typography,\r\n} from 'antd';\r\nimport axios from 'axios';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst UserInfo = (props) => {\r\n  const [password, setPassword] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [firstName, setFirstName] = useState();\r\n  const [lastName, setLastName] = useState();\r\n\r\n  const onPasswordChange = (evt) => {\r\n    setPassword(evt.target.value);\r\n  };\r\n\r\n  const onEmailChange = (evt) => {\r\n    setEmail(evt.target.value);\r\n  };\r\n\r\n  const onFirstNameChange = (evt) => {\r\n    setFirstName(evt.target.value);\r\n  };\r\n\r\n  const onLastNameChange = (evt) => {\r\n    setLastName(evt.target.value);\r\n  };\r\n\r\n  const onSubmit = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    const values = {\r\n      userId: props.match.params.userId,\r\n      lastName,\r\n      firstName,\r\n      email,\r\n      password,\r\n    };\r\n\r\n    axios.post('/api/users/updateInformation', values).then((response) => {\r\n      if (response.data.success) {\r\n        alert('Update information successfully');\r\n        props.history.push('/');\r\n      } else {\r\n        alert('Failed to update information');\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div style={{ maxWidth: '800px', margin: '2rem auto' }}>\r\n      <div style={{ textAlign: 'center', marginBottom: '2rem' }}>\r\n        <Title level={2}>Update Information</Title>\r\n      </div>\r\n\r\n      <form onSubmit={onSubmit} style={{ width: '800px' }}>\r\n        <Form.Item>\r\n          <label>First name:</label>\r\n          <Input\r\n            type=\"text\"\r\n            placeholder=\"Enter your new first name\"\r\n            value={firstName}\r\n            onChange={onFirstNameChange}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <label>Last name:</label>\r\n          <Input\r\n            type=\"text\"\r\n            placeholder=\"Enter your new last name\"\r\n            value={lastName}\r\n            onChange={onLastNameChange}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <label>Email:</label>\r\n          <Input\r\n            type=\"email\"\r\n            placeholder=\"Enter your new email\"\r\n            value={email}\r\n            onChange={onEmailChange}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <label>Password:</label>\r\n          <Input\r\n            type=\"password\"\r\n            placeholder=\"Enter your new password\"\r\n            value={password}\r\n            onChange={onPasswordChange}\r\n          />\r\n        </Form.Item>\r\n        <Button size=\"default\" onClick={onSubmit}>\r\n          Submit\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserInfo;\r\n","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\NavBar\\NavBar.js",["145"],"import React, { useState } from 'react';\r\nimport { Drawer, Button, Icon } from 'antd';\r\nimport { useSelector } from 'react-redux';\r\nimport LeftMenu from './Sections/LeftMenu';\r\nimport RightMenu from './Sections/RightMenu';\r\nimport './Navbar.css';\r\n\r\nfunction NavBar() {\r\n  const [visible, setVisible] = useState(false);\r\n  const user = useSelector((state) => state.user);\r\n  // TODO: only show right nav bar\r\n\r\n  const showDrawer = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const onClose = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  return (\r\n    <nav\r\n      className=\"menu\"\r\n      style={{ position: 'fixed', zIndex: 999, width: '100%' }}\r\n    >\r\n      <div className=\"menu__logo\">\r\n        <a\r\n          href=\"/\"\r\n          style={{ display: 'flex', justifyContent: 'space-between', textDecoration: 'none' }}\r\n        >\r\n          Homepage\r\n        </a>\r\n      </div>\r\n      <div className=\"menu__container\">\r\n        <div className=\"menu_left\">\r\n          <LeftMenu mode=\"horizontal\" />\r\n        </div>\r\n        <div className=\"menu_rigth\">\r\n          <RightMenu mode=\"horizontal\" />\r\n        </div>\r\n        <Button\r\n          className=\"menu__mobile-button\"\r\n          type=\"primary\"\r\n          onClick={showDrawer}\r\n        >\r\n          <Icon type=\"align-right\" />\r\n        </Button>\r\n        <Drawer\r\n          title=\"Basic Drawer\"\r\n          placement=\"right\"\r\n          className=\"menu_drawer\"\r\n          closable={false}\r\n          onClose={onClose}\r\n          visible={visible}\r\n        >\r\n          <LeftMenu mode=\"inline\" />\r\n          <RightMenu mode=\"inline\" />\r\n        </Drawer>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\RegisterPage\\RegisterPage.js",["146","147","148"],"/* eslint-disable no-shadow */\r\nimport React from 'react';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n  Form, Input, Button, Select,\r\n} from 'antd';\r\nimport { registerUser } from '../../../_actions/user_actions';\r\n\r\nconst { Option } = Select;\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 8 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 16 },\r\n  },\r\n};\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n      offset: 8,\r\n    },\r\n  },\r\n};\r\n\r\nfunction RegisterPage(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: '',\r\n        lastName: '',\r\n        firstName: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        role: '',\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        firstName: Yup.string().required('First name is required'),\r\n        lastName: Yup.string().required('Last name is required'),\r\n        email: Yup.string()\r\n          .email('Email is invalid')\r\n          .required('Email is required'),\r\n        password: Yup.string()\r\n          .min(6, 'Password must be at least 6 characters')\r\n          .required('Password is required'),\r\n        confirmPassword: Yup.string()\r\n          .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n          .required('Confirm password is required'),\r\n        role: Yup.string().required('Role is required'),\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n          const dataToSubmit = {\r\n            email: values.email,\r\n            password: values.password,\r\n            firstname: values.firstName,\r\n            lastname: values.lastName,\r\n            role: values.role,\r\n          };\r\n\r\n          dispatch(registerUser(dataToSubmit)).then((response) => {\r\n            if (response.payload.success) {\r\n              props.history.push('/login');\r\n            } else {\r\n              alert(response.payload.err.errmsg);\r\n            }\r\n          });\r\n\r\n          setSubmitting(false);\r\n        }, 500);\r\n      }}\r\n    >\r\n      {(props) => {\r\n        const {\r\n          values,\r\n          touched,\r\n          errors,\r\n          dirty,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          handleReset,\r\n        } = props;\r\n        return (\r\n          <div className=\"app\">\r\n            <h2>Sign up</h2>\r\n            <Form\r\n              style={{ minWidth: '450px' }}\r\n              {...formItemLayout}\r\n              onSubmit={handleSubmit}\r\n            >\r\n              <Form.Item required label=\"First Name\">\r\n                <Input\r\n                  id=\"firstName\"\r\n                  placeholder=\"Enter your first name\"\r\n                  type=\"text\"\r\n                  value={values.firstName}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.firstName && touched.firstName\r\n                      ? 'text-input error'\r\n                      : 'text-input'\r\n                  }\r\n                />\r\n                {errors.firstName && touched.firstName && (\r\n                  <div className=\"input-feedback\">{errors.firstName}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item required label=\"Last Name\">\r\n                <Input\r\n                  id=\"lastName\"\r\n                  placeholder=\"Enter your last name\"\r\n                  type=\"text\"\r\n                  value={values.lastName}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.lastName && touched.lastName\r\n                      ? 'text-input error'\r\n                      : 'text-input'\r\n                  }\r\n                />\r\n                {errors.lastName && touched.lastName && (\r\n                  <div className=\"input-feedback\">{errors.lastName}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                required\r\n                label=\"Email\"\r\n                hasFeedback\r\n                validateStatus={\r\n                  errors.email && touched.email ? 'error' : 'success'\r\n                }\r\n              >\r\n                <Input\r\n                  id=\"email\"\r\n                  placeholder=\"Enter your email\"\r\n                  type=\"email\"\r\n                  value={values.email}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.email && touched.email\r\n                      ? 'text-input error'\r\n                      : 'text-input'\r\n                  }\r\n                />\r\n                {errors.email && touched.email && (\r\n                  <div className=\"input-feedback\">{errors.email}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                required\r\n                label=\"Password\"\r\n                hasFeedback\r\n                validateStatus={\r\n                  errors.password && touched.password ? 'error' : 'success'\r\n                }\r\n              >\r\n                <Input\r\n                  id=\"password\"\r\n                  placeholder=\"Enter your password\"\r\n                  type=\"password\"\r\n                  value={values.password}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.password && touched.password\r\n                      ? 'text-input error'\r\n                      : 'text-input'\r\n                  }\r\n                />\r\n                {errors.password && touched.password && (\r\n                  <div className=\"input-feedback\">{errors.password}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item required label=\"Confirm\" hasFeedback>\r\n                <Input\r\n                  id=\"confirmPassword\"\r\n                  placeholder=\"Enter your confirm password\"\r\n                  type=\"password\"\r\n                  value={values.confirmPassword}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.confirmPassword && touched.confirmPassword\r\n                      ? 'text-input error'\r\n                      : 'text-input'\r\n                  }\r\n                />\r\n                {errors.confirmPassword && touched.confirmPassword && (\r\n                  <div className=\"input-feedback\">{errors.confirmPassword}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item required label=\"Role\" hasFeedback>\r\n                <Select\r\n                  id=\"role\"\r\n                  placeholder=\"Select your role\"\r\n                  value={values.role}\r\n                  onChange={(selectedOption) => handleChange('role')(selectedOption)}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.role && touched.role\r\n                      ? 'text-input error'\r\n                      : 'text-input'\r\n                  }\r\n                >\r\n                  <Option value=\"admin\">Admin</Option>\r\n                  <Option value=\"doctor\">Doctor</Option>\r\n                  <Option value=\"laboratory staff\">Laboratory staff</Option>\r\n                  <Option value=\"imaging staff\">Imaging staff</Option>\r\n                </Select>\r\n                {errors.role && touched.role && (\r\n                  <div className=\"input-feedback\">{errors.role}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item {...tailFormItemLayout}>\r\n                <Button\r\n                  onClick={handleSubmit}\r\n                  type=\"primary\"\r\n                  disabled={isSubmitting}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default RegisterPage;\r\n","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\Footer\\Footer.js",[],"C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\LoginPage\\LoginPage.js",["149","150","151"],"/* eslint-disable jsx-a11y/label-has-associated-control */\r\n/* eslint-disable no-shadow */\r\nimport React, { useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n  Form, Icon, Input, Button, Checkbox, Typography,\r\n} from 'antd';\r\nimport { useDispatch } from 'react-redux';\r\nimport { loginUser } from '../../../_actions/user_actions';\r\n\r\nconst { Title } = Typography;\r\n\r\nfunction LoginPage(props) {\r\n  const dispatch = useDispatch();\r\n  const rememberMeChecked = !!localStorage.getItem('rememberMe');\r\n\r\n  const [formErrorMessage, setFormErrorMessage] = useState('');\r\n  const [rememberMe, setRememberMe] = useState(rememberMeChecked);\r\n\r\n  const handleRememberMe = () => {\r\n    setRememberMe(!rememberMe);\r\n  };\r\n\r\n  const initialEmail = localStorage.getItem('rememberMe')\r\n    ? localStorage.getItem('rememberMe')\r\n    : '';\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: initialEmail,\r\n        password: '',\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        email: Yup.string()\r\n          .email('Email is invalid')\r\n          .required('Email is required'),\r\n        password: Yup.string()\r\n          .min(6, 'Password must be at least 6 characters')\r\n          .required('Password is required')\r\n          .matches(/(?=.*[0-9])/, 'Password must contain a number.'),\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n          const dataToSubmit = {\r\n            email: values.email,\r\n            password: values.password,\r\n          };\r\n\r\n          dispatch(loginUser(dataToSubmit))\r\n            .then((response) => {\r\n              if (response.payload.loginSuccess) {\r\n                window.localStorage.setItem('userId', response.payload.userId);\r\n                // set id of user to local storage\r\n                if (rememberMe === true) {\r\n                  window.localStorage.setItem('rememberMe', values.id);\r\n                } else {\r\n                  localStorage.removeItem('rememberMe');\r\n                }\r\n                props.history.push('/');\r\n              } else {\r\n                setFormErrorMessage(\r\n                  'Check out your email address or password again',\r\n                );\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              setFormErrorMessage(\r\n                'Check out your email address or password again',\r\n              );\r\n              setTimeout(() => {\r\n                setFormErrorMessage('');\r\n              }, 3000);\r\n            });\r\n          setSubmitting(false);\r\n        }, 500);\r\n      }}\r\n    >\r\n      {(props) => {\r\n        const {\r\n          values,\r\n          touched,\r\n          errors,\r\n          dirty,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          handleReset,\r\n        } = props;\r\n        return (\r\n          <div className=\"app\">\r\n            <Title level={2}>Log In</Title>\r\n            <form onSubmit={handleSubmit} style={{ width: '350px' }}>\r\n              <Form.Item required>\r\n                <Input\r\n                  id=\"email\"\r\n                  prefix={\r\n                    <Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />\r\n                  }\r\n                  placeholder=\"Enter your email\"\r\n                  type=\"email\"\r\n                  value={values.email}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.email && touched.email\r\n                      ? 'text-input error'\r\n                      : 'text-input'\r\n                  }\r\n                />\r\n                {errors.email && touched.email && (\r\n                  <div className=\"input-feedback\">{errors.email}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item required>\r\n                <Input\r\n                  id=\"password\"\r\n                  prefix={\r\n                    <Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />\r\n                  }\r\n                  placeholder=\"Enter your password\"\r\n                  type=\"password\"\r\n                  value={values.password}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.password && touched.password\r\n                      ? 'text-input error'\r\n                      : 'text-input'\r\n                  }\r\n                />\r\n                {errors.password && touched.password && (\r\n                  <div className=\"input-feedback\">{errors.password}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              {formErrorMessage && (\r\n                <label>\r\n                  <p\r\n                    style={{\r\n                      color: '#ff0000bf',\r\n                      fontSize: '0.7rem',\r\n                      border: '1px solid',\r\n                      padding: '1rem',\r\n                      borderRadius: '10px',\r\n                    }}\r\n                  >\r\n                    {formErrorMessage}\r\n                  </p>\r\n                </label>\r\n              )}\r\n\r\n              <Form.Item>\r\n                <Checkbox\r\n                  id=\"rememberMe\"\r\n                  onChange={handleRememberMe}\r\n                  checked={rememberMe}\r\n                >\r\n                  Remember me\r\n                </Checkbox>\r\n                <a\r\n                  className=\"login-form-forgot\"\r\n                  href=\"/reset_user\"\r\n                  style={{ float: 'right' }}\r\n                >\r\n                  Forget password?\r\n                </a>\r\n                <div>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    htmlType=\"submit\"\r\n                    className=\"login-form-button\"\r\n                    style={{ minWidth: '100%' }}\r\n                    disabled={isSubmitting}\r\n                    onSubmit={handleSubmit}\r\n                  >\r\n                    Log in\r\n                  </Button>\r\n                </div>\r\n                Or\r\n                {' '}\r\n                <a href=\"/register\">register now!</a>\r\n              </Form.Item>\r\n            </form>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default withRouter(LoginPage);\r\n","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\LandingPage\\LandingPage.js",["152","153"],"import React, { useState, useEffect } from 'react';\r\n\r\nfunction LandingPage() {\r\n  return <></>;\r\n}\r\n\r\nexport default LandingPage;\r\n","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\serviceWorker.js",["154","155","156","157","158"],"/* eslint-disable no-param-reassign */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\_actions\\user_actions.js",[],"C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\Config.js",[],"C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\utils\\FileUpload.js",["159"],"import React, { useState } from 'react';\r\nimport Dropzone from 'react-dropzone';\r\nimport { Icon } from 'antd';\r\nimport Axios from 'axios';\r\n\r\nfunction FileUpload(props) {\r\n  const [images, setImages] = useState([]);\r\n\r\n  const onDrop = (files) => {\r\n    const formData = new FormData();\r\n    const config = {\r\n      header: { 'content-type': 'multipart/form-data' },\r\n    };\r\n    formData.append('file', files[0]);\r\n    Axios.post('/api/patients/uploadImage', formData, config).then(\r\n      (response) => {\r\n        if (response.data.success) {\r\n          setImages([...images, response.data.image]);\r\n          props.refreshFunction([...images, response.data.image]);\r\n        } else {\r\n          alert('Failed to save images');\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  const onDelete = (image) => {\r\n    const currentIndex = images.indexOf(image);\r\n\r\n    const newImages = [...images];\r\n    newImages.splice(currentIndex, 1);\r\n\r\n    setImages(newImages);\r\n    props.refreshFunction(newImages);\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n      <Dropzone onDrop={onDrop} multiple={false} maxSize={800000000}>\r\n        {({ getRootProps, getInputProps }) => (\r\n          <div\r\n            style={{\r\n              width: '35%',\r\n              height: '400px',\r\n              border: '1px solid lightgray',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n            }}\r\n            {...getRootProps()}\r\n          >\r\n            <input {...getInputProps()} />\r\n            <Icon type=\"plus\" style={{ fontSize: '3rem' }} />\r\n          </div>\r\n        )}\r\n      </Dropzone>\r\n\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          width: '60%',\r\n          height: '400px',\r\n          border: '1px solid lightgray',\r\n          overflowX: 'scroll',\r\n          overflowY: 'hidden',\r\n        }}\r\n      >\r\n        {images.map((image, index) => (\r\n          <div key={`diagnosis-${image}}`} onClick={() => onDelete(image)}>\r\n            <img\r\n              style={{ minWidth: '400px', width: '400px', height: '400px' }}\r\n              src={`http://localhost:5000/${image}`}\r\n              alt={`patientImage-${index}`}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FileUpload;\r\n","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\NavBar\\Sections\\RightMenu.js",["160","161"],"C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\NavBar\\Sections\\LeftMenu.js",["162","163","164"],"/* eslint-disable react/destructuring-assignment */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Menu } from 'antd';\r\nimport { useSelector } from 'react-redux';\r\nimport { USER_SERVER } from '../../../Config';\r\n\r\nconst { SubMenu } = Menu;\r\nconst MenuItemGroup = Menu.ItemGroup;\r\n\r\nfunction LeftMenu(props) {\r\n  const user = useSelector((state) => state.user);\r\n\r\n  const [adminBoard, showAdminBoard] = useState(false);\r\n  const [doctorBoard, showDoctorBoard] = useState(false);\r\n  const [laboratoryStaffBoard, showLaboratoryStaffBoard] = useState(false);\r\n  const [imagingStaffBoard, showImagingStaffBoard] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (user !== undefined && user.userData !== undefined) {\r\n      switch (user.userData.role) {\r\n        case 'admin':\r\n          showAdminBoard(true);\r\n          break;\r\n        case 'doctor':\r\n          showDoctorBoard(true);\r\n          break;\r\n        case 'laboratory staff':\r\n          showLaboratoryStaffBoard(true);\r\n          break;\r\n        case 'imaging staff':\r\n          showImagingStaffBoard(true);\r\n          break;\r\n        default:\r\n      }\r\n    }\r\n  }, [user.userData]);\r\n\r\n  return (\r\n    <Menu mode={props.mode}>\r\n      {adminBoard && (\r\n        <Menu.Item key=\"adminBoard\">\r\n          <a href=\"/adminBoard\" style={{ textDecoration: 'none' }}>Admin Board</a>\r\n        </Menu.Item>\r\n      )}\r\n\r\n      {doctorBoard && (\r\n      <Menu.Item key=\"doctorBoard\">\r\n        <a href=\"/\" style={{ textDecoration: 'none' }}>Doctor Board</a>\r\n      </Menu.Item>\r\n      )}\r\n\r\n      {laboratoryStaffBoard && (\r\n      <Menu.Item key=\"laboratoryStaffBoard\">\r\n        <a href=\"/laboratoryStaffBoard\" style={{ textDecoration: 'none' }}>Laboratory Staff Board</a>\r\n      </Menu.Item>\r\n      )}\r\n\r\n      {imagingStaffBoard && (\r\n      <Menu.Item key=\"imagingStaffBoard\">\r\n        <a href=\"/imagingStaffBoard\" style={{ textDecoration: 'none' }}>Imaging Staff Board</a>\r\n      </Menu.Item>\r\n      )}\r\n\r\n    </Menu>\r\n  );\r\n}\r\n\r\nexport default LeftMenu;\r\n","C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\_reducers\\index.js",[],"C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\_actions\\types.js",[],"C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\_reducers\\user_reducer.js",[],"C:\\Users\\Admin\\Desktop\\Đồ án tốt nghiệp\\code\\client\\src\\components\\views\\AdminBoard\\AdminBoard.js",["165","166"],{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","severity":1,"message":"178","line":5,"column":16,"nodeType":"179","messageId":"180","endLine":5,"endColumn":25},{"ruleId":"181","severity":1,"message":"182","line":34,"column":10,"nodeType":"183","messageId":"184","endLine":34,"endColumn":20},{"ruleId":"181","severity":1,"message":"185","line":39,"column":10,"nodeType":"183","messageId":"184","endLine":39,"endColumn":16},{"ruleId":"181","severity":1,"message":"186","line":39,"column":18,"nodeType":"183","messageId":"184","endLine":39,"endColumn":27},{"ruleId":"181","severity":1,"message":"187","line":43,"column":10,"nodeType":"183","messageId":"184","endLine":43,"endColumn":18},{"ruleId":"181","severity":1,"message":"188","line":44,"column":10,"nodeType":"183","messageId":"184","endLine":44,"endColumn":23},{"ruleId":"189","severity":1,"message":"190","line":73,"column":11,"nodeType":"191","messageId":"192","endLine":73,"endColumn":35},{"ruleId":"181","severity":1,"message":"193","line":122,"column":9,"nodeType":"183","messageId":"184","endLine":122,"endColumn":30},{"ruleId":"181","severity":1,"message":"185","line":39,"column":10,"nodeType":"183","messageId":"184","endLine":39,"endColumn":16},{"ruleId":"181","severity":1,"message":"186","line":39,"column":18,"nodeType":"183","messageId":"184","endLine":39,"endColumn":27},{"ruleId":"181","severity":1,"message":"187","line":43,"column":10,"nodeType":"183","messageId":"184","endLine":43,"endColumn":18},{"ruleId":"189","severity":1,"message":"190","line":73,"column":11,"nodeType":"191","messageId":"192","endLine":73,"endColumn":35},{"ruleId":"181","severity":1,"message":"185","line":39,"column":10,"nodeType":"183","messageId":"184","endLine":39,"endColumn":16},{"ruleId":"181","severity":1,"message":"186","line":39,"column":18,"nodeType":"183","messageId":"184","endLine":39,"endColumn":27},{"ruleId":"181","severity":1,"message":"187","line":43,"column":10,"nodeType":"183","messageId":"184","endLine":43,"endColumn":18},{"ruleId":"189","severity":1,"message":"190","line":73,"column":11,"nodeType":"191","messageId":"192","endLine":73,"endColumn":35},{"ruleId":"181","severity":1,"message":"185","line":39,"column":10,"nodeType":"183","messageId":"184","endLine":39,"endColumn":16},{"ruleId":"181","severity":1,"message":"186","line":39,"column":18,"nodeType":"183","messageId":"184","endLine":39,"endColumn":27},{"ruleId":"181","severity":1,"message":"187","line":43,"column":10,"nodeType":"183","messageId":"184","endLine":43,"endColumn":18},{"ruleId":"181","severity":1,"message":"188","line":44,"column":10,"nodeType":"183","messageId":"184","endLine":44,"endColumn":23},{"ruleId":"189","severity":1,"message":"190","line":73,"column":11,"nodeType":"191","messageId":"192","endLine":73,"endColumn":35},{"ruleId":"181","severity":1,"message":"193","line":122,"column":9,"nodeType":"183","messageId":"184","endLine":122,"endColumn":30},{"ruleId":"189","severity":1,"message":"190","line":45,"column":9,"nodeType":"191","messageId":"192","endLine":45,"endColumn":49},{"ruleId":"189","severity":1,"message":"190","line":48,"column":9,"nodeType":"191","messageId":"192","endLine":48,"endColumn":46},{"ruleId":"181","severity":1,"message":"194","line":10,"column":9,"nodeType":"183","messageId":"184","endLine":10,"endColumn":13},{"ruleId":"189","severity":1,"message":"190","line":77,"column":15,"nodeType":"191","messageId":"192","endLine":77,"endColumn":49},{"ruleId":"181","severity":1,"message":"195","line":90,"column":11,"nodeType":"183","messageId":"184","endLine":90,"endColumn":16},{"ruleId":"181","severity":1,"message":"196","line":95,"column":11,"nodeType":"183","messageId":"184","endLine":95,"endColumn":22},{"ruleId":"181","severity":1,"message":"197","line":69,"column":21,"nodeType":"183","messageId":"184","endLine":69,"endColumn":24},{"ruleId":"181","severity":1,"message":"195","line":86,"column":11,"nodeType":"183","messageId":"184","endLine":86,"endColumn":16},{"ruleId":"181","severity":1,"message":"196","line":91,"column":11,"nodeType":"183","messageId":"184","endLine":91,"endColumn":22},{"ruleId":"181","severity":1,"message":"198","line":1,"column":17,"nodeType":"183","messageId":"184","endLine":1,"endColumn":25},{"ruleId":"181","severity":1,"message":"199","line":1,"column":27,"nodeType":"183","messageId":"184","endLine":1,"endColumn":36},{"ruleId":"200","severity":1,"message":"201","line":39,"column":15,"nodeType":"202","messageId":"192","endLine":39,"endColumn":26},{"ruleId":"200","severity":1,"message":"201","line":52,"column":15,"nodeType":"202","messageId":"192","endLine":52,"endColumn":26},{"ruleId":"200","severity":1,"message":"201","line":64,"column":7,"nodeType":"202","messageId":"192","endLine":64,"endColumn":20},{"ruleId":"200","severity":1,"message":"201","line":90,"column":7,"nodeType":"202","messageId":"192","endLine":90,"endColumn":18},{"ruleId":"200","severity":1,"message":"201","line":117,"column":11,"nodeType":"202","messageId":"192","endLine":117,"endColumn":22},{"ruleId":"189","severity":1,"message":"190","line":21,"column":11,"nodeType":"191","messageId":"192","endLine":21,"endColumn":41},{"ruleId":"181","severity":1,"message":"203","line":4,"column":16,"nodeType":"183","messageId":"184","endLine":4,"endColumn":20},{"ruleId":"189","severity":1,"message":"190","line":27,"column":9,"nodeType":"191","messageId":"192","endLine":27,"endColumn":35},{"ruleId":"181","severity":1,"message":"204","line":5,"column":10,"nodeType":"183","messageId":"184","endLine":5,"endColumn":21},{"ruleId":"181","severity":1,"message":"205","line":7,"column":9,"nodeType":"183","messageId":"184","endLine":7,"endColumn":16},{"ruleId":"181","severity":1,"message":"206","line":8,"column":7,"nodeType":"183","messageId":"184","endLine":8,"endColumn":20},{"ruleId":"189","severity":1,"message":"190","line":88,"column":11,"nodeType":"191","messageId":"192","endLine":88,"endColumn":51},{"ruleId":"189","severity":1,"message":"190","line":91,"column":11,"nodeType":"191","messageId":"192","endLine":91,"endColumn":48},"lines-around-directive",["207"],"no-spaced-func",["208"],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"func-names","Unexpected unnamed function.","FunctionDeclaration","unnamed","no-unused-vars","'successful' is assigned a value but never used.","Identifier","unusedVar","'doctor' is assigned a value but never used.","'setDoctor' is assigned a value but never used.","'caseType' is assigned a value but never used.","'initialSample' is assigned a value but never used.","no-alert","Unexpected alert.","CallExpression","unexpected","'onChangeInitialSample' is assigned a value but never used.","'user' is assigned a value but never used.","'dirty' is assigned a value but never used.","'handleReset' is assigned a value but never used.","'err' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","no-console","Unexpected console statement.","MemberExpression","'Icon' is defined but never used.","'USER_SERVER' is defined but never used.","'SubMenu' is assigned a value but never used.","'MenuItemGroup' is assigned a value but never used.","padding-line-between-statements","func-call-spacing"]